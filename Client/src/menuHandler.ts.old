import * as alt from 'alt-client';
import * as native from 'natives';
import * as NativeUI from '/files/includes/NativeUIMenu/NativeUI.mjs';
var ui = null;
alt.onServer('CreateNativeMenu', CreateNativeMenu);
alt.onServer('CloseNativeMenu', () => {
    if (ui === null)
        return;
    ui.Clear();
    ui.Close();
    ui = null;
});
var userInputTrigger = undefined;
alt.onServer('getUserInput', getUserInput);
function getUserInput(serverTrigger, defaultText, length) {
    userInputTrigger = serverTrigger;
    native.displayOnscreenKeyboard(0, "FMMC_KEY_TIP8", "", defaultText, "", "", "", length);
    alt.everyTick(() => {
        if (userInputTrigger === undefined)
            return;
        if (native.updateOnscreenKeyboard() === 1) {
            var result = native.getOnscreenKeyboardResult();
            userInputTrigger = undefined;
            alt.emitServer(userInputTrigger, result);
            return;
        }
        if (native.updateOnscreenKeyboard() === 2) {
            userInputTrigger = undefined;
            return;
        }
    });
}
function CreateNativeMenu(nativeJson) {
    var nativeMenu = JSON.parse(nativeJson);
    if (ui !== null) {
        ui.Clear();
        ui.Close();
        ui = null;
    }
    ui = new NativeUI.Menu(nativeMenu.Title, nativeMenu.SubTitle, new NativeUI.Point(50, 50));
    var menuItems = nativeMenu.MenuItems;
    if (menuItems !== null) {
        menuItems.forEach(menuItem => {
            ui.AddItem(new NativeUI.UIMenuItem(menuItem.Title, menuItem.Description));
        });
    }
    var listMenuItems = nativeMenu.ListMenuItems;
    if (listMenuItems !== null) {
        listMenuItems.forEach(listItem => {
            ui.AddItem(new NativeUI.UIMenuListItem(listItem.Title, '', new NativeUI.ItemsCollection(listItem.StringList)));
        });
    }
    var checkedMenuItems = nativeMenu.CheckedMenuItems;
    if (checkedMenuItems !== null) {
        checkedMenuItems.forEach(checkedItem => {
            ui.AddItem(new NativeUI.UIMenuCheckboxItem(checkedItem.Title, checkedItem.Checked, checkedItem.Description));
        });
    }
    var colorMenuItems = nativeMenu.NativeColorItems;
    if (colorMenuItems !== null) {
        colorMenuItems.forEach(colorItem => {
            var item = new NativeUI.UIMenuItem(colorItem.Title, colorItem.Description);
            item.BackColor = new NativeUI.Color(colorItem.ColorR, colorItem.ColorG, colorItem.ColorB, colorItem.ColorA);
            item.HighlightedBackColor = new NativeUI.Color(colorItem.HighlightColorR, colorItem.HighlightColorG, colorItem.HighlightColorB, colorItem.HighlightColorA);
            item.ForeColor = new NativeUI.Color(255, 255, 255, 255);
            item.HighlightedForeColor = new NativeUI.Color(255, 255, 255, 255);
            ui.AddItem(item);
        });
    }
    ui.ItemSelect.on((item, index) => {
        if (item instanceof NativeUI.UIMenuListItem) {
            ui.Close();
            ui = null;
            if (nativeMenu.PassIndex) {
                alt.emitServer('NativeMenuCallback', nativeMenu.ServerTrigger, item.Text, index);
            }
            else {
                alt.emitServer('NativeMenuCallback', nativeMenu.ServerTrigger, item.Text, 0);
            }
        }
        else {
            ui.Clear();
            ui.Close();
            ui = null;
            if (nativeMenu.PassIndex) {
                alt.emitServer('NativeMenuCallback', nativeMenu.ServerTrigger, item.Text, index);
            }
            else {
                alt.emitServer('NativeMenuCallback', nativeMenu.ServerTrigger, item.Text, 0);
            }
        }
    });
    ui.ListChange.on((item, index) => {
        var text = item.Text;
        var value = item.SelectedItem.DisplayText;
        alt.emitServer('NativeMenuListChange', nativeMenu.ListTrigger, text, value);
    });
    ui.IndexChange.on((index) => {
        if (nativeMenu.ItemChangeTrigger === null)
            return;
        var menuItem = menuItems[index];
        alt.emitServer('NativeMenuIndexChange', nativeMenu.ItemChangeTrigger, index, menuItem.Title);
    });
    ui.MenuClose.on(() => {
        ui = null;
    });
    ui.RefreshIndex();
    ui.Open();
}
